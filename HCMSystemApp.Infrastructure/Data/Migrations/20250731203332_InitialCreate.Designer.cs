// <auto-generated />
using System;
using HCMSystemApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCMSystemApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250731203332_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManagerId = 1,
                            Name = "Software Development"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Position = "Junior .Net Developer",
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Position = "Sinior full stack Developer",
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.HasIndex("UserId");

                    b.ToTable("Payrolls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonus = 500.00m,
                            IssuedOn = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 4750.00m,
                            Period = "01-2025",
                            SalaryId = 1,
                            TaxAmount = 750.00m,
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        },
                        new
                        {
                            Id = 2,
                            Bonus = 200.00m,
                            IssuedOn = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 2920.00m,
                            Period = "01-2025",
                            SalaryId = 2,
                            TaxAmount = 480.00m,
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 3,
                            Bonus = 250.00m,
                            IssuedOn = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 3140.00m,
                            Period = "01-2025",
                            SalaryId = 3,
                            TaxAmount = 510.00m,
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        },
                        new
                        {
                            Id = 4,
                            Bonus = 300.00m,
                            IssuedOn = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 4720.00m,
                            Period = "02-2025",
                            SalaryId = 1,
                            TaxAmount = 780.00m,
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        },
                        new
                        {
                            Id = 5,
                            Bonus = 150.00m,
                            IssuedOn = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 2890.00m,
                            Period = "02-2025",
                            SalaryId = 2,
                            TaxAmount = 460.00m,
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 6,
                            Bonus = 300.00m,
                            IssuedOn = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NetAmount = 3170.00m,
                            Period = "02-2025",
                            SalaryId = 3,
                            TaxAmount = 530.00m,
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4656095-c561-4bfa-a5ad-08f7678af1bf",
                            Description = "",
                            Name = "HRAdmin",
                            NormalizedName = "HRADMIN"
                        },
                        new
                        {
                            Id = "a2196e3c-e72a-4778-994f-36c85380e060",
                            Description = "",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "9b325984-c63f-4dec-a00b-eeaab3d34035",
                            Description = "",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Salary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5500.00m,
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3200.00m,
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 3400.00m,
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            AccessFailedCount = 0,
                            Age = 40,
                            ConcurrencyStamp = "d53e2cf3-c92f-4e6d-acdf-0c0c660b6815",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH2buGG2le7ivov1uisFmOzhsXMC1Shsq0DrVZNzztSmXZi71qBpuXnOxQgzFpLRLg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58dd5119-54f5-4899-bdb9-bcb2cfb75c95",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6",
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "569e873b-e2ae-474b-b22a-d05f2a3b0426",
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECv75UZ35MMCBq7yxZ+VoUG0aX3qgPUwD4Oh2/5nw+Thz3bYTTPkW9lwBQ9fmzpsmA==",
                            PhoneNumber = "0881234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2488e8a9-070b-431d-8c6e-89f8dfdb984b",
                            TwoFactorEnabled = false,
                            UserName = "manager@example.com"
                        },
                        new
                        {
                            Id = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9",
                            AccessFailedCount = 0,
                            Age = 28,
                            ConcurrencyStamp = "b84f1c57-d33c-4510-a4fc-b4b9d1daec37",
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE1@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEDVwrZ4vuXk/875NwcVqUCzxNlnhB1kTHLumyodl9A+ykG0nhCt2MKoAvBRhouFHA==",
                            PhoneNumber = "0881111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43d2fb24-c6dd-436b-ba14-dd1d253e8b84",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        },
                        new
                        {
                            Id = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1",
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "b4623e7c-077a-4d7b-a3fe-a3e52068e016",
                            Email = "employee2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxFI1Cb7002kBJHvfz4L86mSuIKEJyJ5+zXoI3Qd78a11A0NYTDK4ygwwEQGfFuAA==",
                            PhoneNumber = "0882222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc40d2d2-4c10-407b-912c-4fea6259bc64",
                            TwoFactorEnabled = false,
                            UserName = "employee2@example.com"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            RoleId = "b4656095-c561-4bfa-a5ad-08f7678af1bf"
                        },
                        new
                        {
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6",
                            RoleId = "a2196e3c-e72a-4778-994f-36c85380e060"
                        },
                        new
                        {
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9",
                            RoleId = "9b325984-c63f-4dec-a00b-eeaab3d34035"
                        },
                        new
                        {
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1",
                            RoleId = "9b325984-c63f-4dec-a00b-eeaab3d34035"
                        });
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vacations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Почивка в Гърция",
                            StartDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Семейна почивка",
                            StartDate = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Лични ангажименти",
                            StartDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Екскурзия до Италия",
                            StartDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "79e1d63d-bbd0-4724-91f6-2ab694ebf4a9"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Почивка в планината",
                            StartDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "d0bd2a23-6c8d-40b5-a476-b7992e7b50e1"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            IsReviewed = true,
                            Reason = "Конференция и кратка отпуска",
                            StartDate = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "f36fc003-dbd1-47b4-9dfd-45ec0f16f5d6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Department", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.Manager", "Manager")
                        .WithOne("Department")
                        .HasForeignKey("HCMSystemApp.Infrastructure.Data.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Manager", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Payroll", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.Salary", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithMany("Payrolls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Salary", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithOne("Salary")
                        .HasForeignKey("HCMSystemApp.Infrastructure.Data.Entities.Salary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.UserRole", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Vacation", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", "User")
                        .WithMany("Vacations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HCMSystemApp.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Manager", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HCMSystemApp.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Payrolls");

                    b.Navigation("Salary");

                    b.Navigation("UserRoles");

                    b.Navigation("Vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
